**** LEXIQUE DE LA LIBRAIRIE ****

Proposition : Chaîne de caractères ayant pour valeur vrai ou faux
Règle : liste de proposition, dont le dernier élément est la conclusion de la règle


**** ALGORITHMES ****
** CREER REGLE **
* LEXIQUE
- nouvelleRègle : élément de type Règle

* DONNEES
/
* RESULTAT(S)
- nouvelleRegle

* DEBUT
nouvelleRegle <- new(Regle)
retourner nouvelleRegle
* FIN

** VERIFIER SI UNE REGLE EST VIDE **
* LEXIQUE
/
* DONNEES
- r : Règle à tester

* DEBUT
    si r est indéfini alors
        retourner VRAI
    sinon 
        retourner FAUX
    fin sinon
* FIN

** RENVOYER LE CONTENU D'UNE REGLE **
* LEXIQUE
/
* DONNEES
- r : Règle à renvoyer

* DEBUT
    si est_vide(r) alors
        retourner indéfini
    sinon
        retourner contenu(r)
    fin sinon
* FIN

** RENVOYER LA VALEUR D'UNE REGLE **
* LEXIQUE
/
* DONNEES
- r : Règle dont la valeur est a renvoyer

* DEBUT
    si valeur(regle) est vrai alors
        retourner vrai
    sinon
        retourner faux
    fin sinon
* FIN

** RENVOYER LA CONCLUSION D'UNE REGLE **
* LEXIQUE
/
* DONNEES
- r : Règle en question

* DEBUT
    si est_vide(r) alors
        retourner indéfini
    sinon
        tant que non est_vide(suiv(r)) faire
            r <- suiv(r)
        fin tant que
        retourner contenu(r)
    fin sinon
* FIN

** AJOUTER UNE PROPOSITION **
* LEXIQUE

* DONNEES
- r : Règle à modifier
- prop : Proposition à ajouter
- valeur : valeur de la proposition (vrai ou faux)
    
* DEBUT
    si est_vide(r) alors
            r<proposition>
            contenu(r) <- prop
            valeur(r) <- valeur
            suiv(r) <- indéfini
        sinon
            tant que non est_vide(r) faire
                r <- suiv(r)
            fin tant que
            nouvProp<Proposition>
            contenu(nouvProp) <- prop
            suiv(nouvProp) <- indéfini
            
            suiv(r) <- nouvProp
        }
        retourner r
* FIN

** AJOUTER UNE CONCLUSION **
* LEXIQUE

* DONNEES
- r : Règle à modifier
- ccl : conclusion à ajouter

* DEBUT
    si est_vide(r) alors
        retourner FAUX
    sinon
        tant que non est_vide(suiv(r)) faire
            r <- suiv(r)
        fin tant que
        nouvProp<proposition>
        contenu(nouvProp) <- ccl
        suiv(nouvProp) <- indéfini
        retourner VRAI
    fin sinon
* FIN

** VERIFIER SI UNE REGLE CONTIENT UNE PROPOSITION **
* LEXIQUE
/
* DONNEES
- r : Règle à tester
- prop : Proposition à trouver

* DEBUT
    si est_vide(r) alors
        retourner FAUX
    sinon 
        si contenu(r) == prop alors
            retourner VRAI
        sinon
            retourner contient(suiv(r),prop)
        fin sinon
    fin sinon
* FIN

** SUPPRIMER UNE PROPOSITION **
* LEXIQUE
/
* DONNEES
- r : Règle à modifier
- p : Pointeur original sur la règle
- prop : Proposition à supprimer

* DEBUT
    si est_vide(r) ou est_vide(p) alors
        retourner indéfini
    sinon
        si contenu(r) == prop alors et valeur(r) est vrai alors
            tmp<proposition> <- suiv(r)
            supprimer(r)
            retourner tmp
        sinon
            si est_vide(suiv(p)) alors
                retourner indéfini
            sinon
                si contenu(suiv(p)) == prop et valeur(r) est vrai alors
                    tmp<proposition> <- indéfini
                    si non est_vide(suiv(suiv(p))) alors
                        tmp <- suiv(suiv(p))
                    fin si
                    supprimer(suiv(p))
                    suiv(p) <- tmp
                    retourner r
                sinon
                    retourner suppr_prop(r,suiv(p),prop)
                fin sinon
            fin sinon
        fin sinon
    fin sinon
* FIN


